{"version":3,"sources":["forms/AddUserForm.js","tables/UserTable.js","forms/EditUserForm.js","serviceWorker.js","index.js","App.js"],"names":["AddUserForm","props","initialFormState","id","name","username","addUser","useState","user","setUser","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","type","onChange","UserTable","users","deleteUser","editRow","length","map","key","onClick","className","window","confirm","colSpan","EditUserForm","currentUser","useEffect","target","updateUser","setEditing","Boolean","location","hostname","match","ReactDOM","render","setUsers","editing","setCurrentUser","updatedUser","filter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e8600a1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst AddUserForm = props => {\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const { addUser } = props;\n  const [user, setUser] = useState(initialFormState);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    setUser({ ...user, [name]: value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!user.name || !user.username) return;\n    addUser(user);\n    setUser(initialFormState);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={user.name}\n        onChange={handleInputChange}\n      />\n      <label>Username</label>\n      <input\n        type=\"text\"\n        name=\"username\"\n        value={user.username}\n        onChange={handleInputChange}\n      />\n      <button>Add new user</button>\n    </form>\n  );\n};\n\nexport { AddUserForm };\n","import React from \"react\";\n\nconst UserTable = props => {\n  const { users, deleteUser, editRow } = props;\n\n  const handleDeleteUser = id => {\n    const answer = window.confirm(\"Are you sure?\");\n\n    if (answer) {\n      deleteUser(id);\n    }\n  };\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Username</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {users.length > 0 ? (\n          users.map(user => (\n            <tr key={user.id}>\n              <td>{user.name}</td>\n              <td>{user.username}</td>\n              <td>\n                <button\n                  onClick={() => {\n                    editRow(user);\n                  }}\n                  className=\"button muted-button\"\n                >\n                  Edit\n                </button>\n                <button\n                  className=\"button muted-button\"\n                  onClick={() => handleDeleteUser(user.id)}\n                >\n                  Delete\n                </button>\n              </td>\n            </tr>\n          ))\n        ) : (\n          <tr>\n            <td colSpan={3}>No users</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  );\n};\n\nexport { UserTable };\n","import React, { useState, useEffect } from \"react\";\n\nconst EditUserForm = props => {\n  const [user, setUser] = useState(props.currentUser);\n\n  useEffect(() => {\n    setUser(props.currentUser);\n  }, [props]);\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    setUser({ ...user, [name]: value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!user.name || !user.username) return;\n\n    props.updateUser(user.id, user);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={user.name}\n        onChange={handleInputChange}\n      />\n      <label>Username</label>\n      <input\n        type=\"text\"\n        name=\"username\"\n        value={user.username}\n        onChange={handleInputChange}\n      />\n      <button>Update user</button>\n      <button\n        onClick={() => props.setEditing(false)}\n        className=\"button muted-button\"\n      >\n        Cancel\n      </button>\n    </form>\n  );\n};\n\nexport { EditUserForm };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from \"react\";\nimport { AddUserForm } from \"./forms/AddUserForm\";\nimport { UserTable } from \"./tables/UserTable\";\nimport { EditUserForm } from \"./forms/EditUserForm\";\nimport \"./App.css\";\n\nconst App = () => {\n  const usersData = [\n    { id: 1, name: \"Tania\", username: \"floppydiskette\" },\n    { id: 2, name: \"Max\", username: \"maxfarseer\" }\n  ];\n\n  const [users, setUsers] = useState(usersData);\n  const [editing, setEditing] = useState(false);\n\n  const initialFormState = { id: null, name: \"\", username: \"\" };\n  const [currentUser, setCurrentUser] = useState(initialFormState);\n\n  const addUser = user => {\n    user.id = users.length + 1;\n    setUsers([...users, user]);\n  };\n\n  const deleteUser = id => {\n    setEditing(false);\n    setUsers(users.filter(user => user.id !== id));\n  };\n\n  const updateUser = (id, updatedUser) => {\n    setEditing(false);\n    setUsers(users.map(user => (user.id === id ? updatedUser : user)));\n  };\n\n  const editRow = user => {\n    const { id, name, username } = user;\n    setEditing(true);\n    setCurrentUser({ id, name, username });\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD App with Hooks</h1>\n      <div className=\"flex-row\">\n        {editing ? (\n          <div>\n            <h2>Edit user</h2>\n            <EditUserForm\n              editing={editing}\n              setEditing={setEditing}\n              currentUser={currentUser}\n              updateUser={updateUser}\n            />\n          </div>\n        ) : (\n          <div>\n            <h2>Add user</h2>\n            <AddUserForm addUser={addUser} />\n          </div>\n        )}\n        <div className=\"flex-large\">\n          <h2>View users</h2>\n          <UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { App };\n"],"sourceRoot":""}